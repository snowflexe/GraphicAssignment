
<head>
    <script src="gl-matrix-min.js"></script>
    <script>
        function main() {
            const canvas = document.querySelector("#glCanvas");
            // Initialize the GL context
            const gl = canvas.getContext("webgl");
        
            // Only continue if WebGL is available and working
            if (gl === null) {
                alert("Unable to initialize WebGL. Your browser or machine may not support it.");
                return;
            }
        
            // Vertex shader program
            const vsSource = `
                attribute vec4 aVertexPosition;
                uniform mat4 uModelViewMatrix;
                uniform mat4 uProjectionMatrix;
                void main() {
                    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
                }
            `;
  
            // Fragment shader program 
            const fsSource = `
                void main() {
                    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); 
                }
            `;
  
            // Initialize a shader program; this is where all the lighting
            // for the vertices and so forth is established.
            const shaderProgram = initShaderProgram(gl, vsSource, fsSource);
  
            // Collect all the info needed to use the shader program.
            // Look up which attribute our shader program is using
            // for aVertexPosition and look up uniform locations.
            const programInfo = {
                program: shaderProgram,
                attribLocations: {
                vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),
                },
                uniformLocations: {
                projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
                modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),
                },
            };
  
            // Now create an array of positions for the objects
            //foundation
            positions = [
            // outer box - offset start = 0

            // right 
            // top box
            0.45, -1.86,//0
            2.4, -1.86,
            0.45, -1.91,
            2.4, -1.91,
            
            // middle box
            0.45, -1.93, //4
            2.55, -1.93, 
            0.45, -1.98,
            2.55, -1.98,
  
            //bottom box
            0.45, -2.0, //8
            2.7, -2.0, 
            0.45, -2.05,
            2.7, -2.05,

            // left
            // top
            -0.45, -1.86,//12
            -2.4, -1.86,
            -0.45, -1.91,
            -2.4, -1.91,

            // middle box
            -0.45, -1.93, //16
            -2.55, -1.93, 
            -0.45, -1.98,
            -2.55, -1.98,

            //bottom box
            -0.45, -2.0, //20
            -2.7, -2.0, 
            -0.45, -2.05,
            -2.7, -2.05,

            //stair top 1
           -0.45, -1.86, //24
            0.45, -1.86,
            -0.45, -1.89,
            0.45, -1.89,

           //stair middle 1
           -0.45, -1.93, //28
            0.45, -1.93,
            -0.45, -1.96,
            0.45, -1.96,

           //stair bottom 1
           -0.45, -2.0, //32
            0.45, -2.0,
            -0.45, -2.03,
            0.45, -2.03,

           //stair top 2
            0.44, -1.90,//36
            0.44, -1.92,
            -0.44, -1.92,
            -0.44, -1.90, 
 
           //stair middle 2
            0.44, -1.97,//40
            0.44, -1.99,
            -0.44, -1.99,
            -0.44, -1.97, 

           //stair bottom 2
            0.44, -2.04,//44
            0.44, -2.08,
            -0.44, -2.08,
            -0.44, -2.04, 



            //right 1st tiang 
            2.1,0,    //48
            2.1,-1.86,
            2.3,-1.86,
            2.3,0,
            2.35,0,
            2.05,0,
            2.05,0.1,
            2.35,0.1,
            2.4,0.1,
            2.4,0.2,
            2,0.2,
            2,0.1,
            2.05,0.1,
            2.35,0.1,
            2.35,0,

            //right 2nd tiang
            1.5,0,    //63
            1.5,-1.86,
            1.7,-1.86,
            1.7,0,
            1.75,0,
            1.45,0,
            1.45,0.1,
            1.75,0.1,
            1.8,0.1,
            1.8,0.2,
            1.4,0.2,
            1.4,0.1,
            1.45,0.1,
            1.75,0.1,
            1.75,0,

            //right 3rd tiang
            0.9,0,    //78
            0.9,-1.86,
            1.1,-1.86,
            1.1,0,
            1.15,0,
            0.85,0,
            0.85,0.1,
            1.15,0.1,
            1.2,0.1,
            1.2,0.2,
            0.8,0.2,
            0.8,0.1,
            0.85,0.1,
            1.15,0.1,
            1.15,0,

            //left 1st tiang
            -2.1,0,    //93
            -2.1,-1.86,
            -2.3,-1.86,
            -2.3,0,
            -2.35,0,
            -2.05,0,
            -2.05,0.1,
            -2.35,0.1,
            -2.4,0.1,
            -2.4,0.2,
            -2,0.2,
            -2,0.1,
            -2.05,0.1,
            -2.35,0.1,
            -2.35,0,

            //left 2rd tiang
            -1.5,0,    //108
            -1.5,-1.86,
            -1.7,-1.86,
            -1.7,0,
            -1.75,0,
            -1.45,0,
            -1.45,0.1,
            -1.75,0.1,
            -1.8,0.1,
            -1.8,0.2,
            -1.4,0.2,
            -1.4,0.1,
            -1.45,0.1,
            -1.75,0.1,
            -1.75,0,

            //left 3nd tiang
            -0.9,0,    //123
            -0.9,-1.86,
            -1.1,-1.86,
            -1.1,0,
            -1.15,0,
            -0.85,0,
            -0.85,0.1,
            -1.15,0.1,
            -1.2,0.1,
            -1.2,0.2,
            -0.8,0.2,
            -0.8,0.1,
            -0.85,0.1,
            -1.15,0.1,
            -1.15,0,

            //lower white box (wong)
            2.38, 0.29, //138
            -2.38, 0.29,
            2.38, 0.24,
            -2.38, 0.24,

            //middle white box (wong)
            2.38, 0.36,//142
            -2.38, 0.36,
            2.38, 0.32,
            -2.38, 0.32,

            //trapezium (wong)
            2.55, 0.68,//146
            -2.55, 0.68,
            -2.38, 0.36,
            2.38, 0.36,

            //upper white box (wong)
            2.58, 0.71,//150
            -2.58, 0.71,
            2.58, 0.68,
            -2.58, 0.68,

            //highest empty box (wong)
            2.58, 0.71,//154
            2.58, 0.8,
            -2.58, 0.8,
            -2.58, 0.71,

            //details in trapezium (wong)
            2.05, 0.41,//158
            2.05, 0.63,
            2, 0.41,
            2, 0.63,
            1.95, 0.41,
            1.95, 0.63,

            1.55, 0.41,
            1.55, 0.63,
            1.5, 0.41,
            1.5, 0.63,
            1.45, 0.41,
            1.45, 0.63,

            1.05, 0.41,
            1.05, 0.63,
            1, 0.41,
            1, 0.63,
            0.95, 0.41,
            0.95, 0.63,

            0.55, 0.41,
            0.55, 0.63,
            0.5, 0.41,
            0.5, 0.63,
            0.45, 0.41,
            0.45, 0.63,

            0.05, 0.41,
            0.05, 0.63,
            0, 0.41,
            0, 0.63,
            -0.05, 0.41,
            -0.05, 0.63,

            -0.45, 0.41,
            -0.45, 0.63, 
            -0.5, 0.41,
            -0.5, 0.63,
            -0.55, 0.41,
            -0.55, 0.63,

            -0.95, 0.41,
            -0.95, 0.63, 
            -1, 0.41,
            -1, 0.63,
            -1.05, 0.41, 
            -1.05, 0.63,

            -1.45, 0.41,
            -1.45, 0.63, 
            -1.5, 0.41,
            -1.5, 0.63,
            -1.55, 0.41, 
            -1.55, 0.63,

            -1.95, 0.41,
            -1.95, 0.63, 
            -2, 0.41,
            -2, 0.63,
            -2.05, 0.41, 
            -2.05, 0.63,
                  
             //right 4th tiang
             0.3,0,    //212
            0.3,-1.86,
            0.5,-1.86,
            0.5,0,
            0.55,0,
            0.25,0,
            0.25,0.1,
            0.55,0.1,
            0.6,0.1,
            0.6,0.2,
            0.2,0.2,
            0.2,0.1,
            0.25,0.1,
            0.55,0.1,
            0.55,0,

            //left 4th tiang
            -0.3,0,    //227
            -0.3,-1.86,
            -0.5,-1.86,
            -0.5,0,
            -0.55,0,
            -0.25,0,
            -0.25,0.1,
            -0.55,0.1,
            -0.6,0.1,
            -0.6,0.2,
            -0.2,0.2,
            -0.2,0.1,
            -0.25,0.1,
            -0.55,0.1,
            -0.55,0,
           
            //1st right tiang details
            2.15,-1.86, //242
            2.15,0,
            2.20,-1.86,
            2.20,0,
            2.25,-1.86,
            2.25,0,

            //2nd right tiang details
            1.55,0,    
            1.55,-1.86,
            1.60,0,
            1.60,-1.86,
            1.65,0,
            1.65,-1.86,

            //3rd right tiang details
            0.95,0,    
            0.95,-1.86,
            1,0,
            1,-1.86,
            1.05,0,
            1.05,-1.86,
            

            //4th right tiang details
            0.35,0,   
            0.35,-1.86,
            0.4,0,
            0.4,-1.86,
            0.45,0,
            0.45,-1.86,

             //1st left tiang details
             -2.15,-1.86, //274
            -2.15,0,
            -2.20,-1.86,
            -2.20,0,
            -2.25,-1.86,
            -2.25,0,

            //2nd left tiang details
            -1.55,0,    
            -1.55,-1.86,
            -1.60,0,
            -1.60,-1.86,
            -1.65,0,
            -1.65,-1.86,

            //3rd left tiang details
            -0.95,0,    
            -0.95,-1.86,
            -1,0,
            -1,-1.86,
            -1.05,0,
            -1.05,-1.86,


            //4th left tiang details
            -0.35,0,   
            -0.35,-1.86,
            -0.4,0,
            -0.4,-1.86,
            -0.45,0,
            -0.45,-1.86,

            //vector = 306

            //chin path
            0.44, -2.08,
             0.9, -2.4,

            -0.44, -2.08,
            -0.9, -2.4,

            4,-2.02,
            -4,-2.02,

            // vector = 32
            //horse //342
            0.8,1.5,
            0.78,1.52,
            0.78,1.52,
            0.75,1.45,
            0.75,1.45,
            0.67,1.49,
            0.67,1.49,
            0.6,1.43,
            0.6,1.43,
            0.45,1.46,

            0.45,1.46,
            0.4,1.42,
            0.6,1.31,
            0.6,1.28,
            0.58,1.26,
            0.56,1.24,
            0.52,1.22,
            0.44,1.20,
            0.42,1.18,
            0.4,1.15,

            0.25,1.2,
            0.26,1.1,
            0.3,1,
            0.32,0.95,
            0.36,0.95,
            0.32,1.1,
            0.38,1.05,
            0.45,1.05,
            0.55,1.07,
            0.85,0.95,

            0.8,0.9,
            0.8,0.85,
            0.6,0.8,
            0.9,0.8,
            0.95,0.85,
            0.95,0.9,
            1.05,1, //horse tail part coordinate
            0.98,1.2,
            0.9,1.2,
            0.85,1.20,

            0.75,1.25,
            0.77,1.3,
            0.78,1.4,
            0.77,1.42,
            0.83,1.5,
            0.8,1.5,

           //left horse
           -0.8,1.5,
            -0.78,1.52,
            -0.75,1.45,
            -0.67,1.49,
            -0.6,1.43,
            -0.45,1.46,

            -0.45,1.46,
            -0.4,1.42,
            -0.6,1.31,
            -0.6,1.28,
            -0.58,1.26,
            -0.56,1.24,
            -0.52,1.22,
            -0.44,1.20,
            -0.42,1.18,
            -0.4,1.15,

            -0.25,1.2,
            -0.26,1.1,
            -0.3,1,
            -0.32,0.95,
            -0.36,0.95,
            -0.32,1.1,
            -0.38,1.05,
            -0.45,1.05,
            -0.55,1.07,
            -0.85,0.95,

            -0.8,0.9,
            -0.8,0.85,
            -0.6,0.8,
            -0.9,0.8,
            -0.95,0.85,
            -0.95,0.9,
            -1.05,1, //horse tail part coordinate
            -0.98,1.2,
            -0.9,1.2,
            -0.85,1.20,

            -0.75,1.25,
            -0.77,1.3,
            -0.78,1.4,
            -0.77,1.42,
            -0.83,1.5,
            -0.8,1.52,
            

            
            ];

            const buffers = initBuffers(gl);
            drawScene(gl, programInfo, buffers);
  
            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 0;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);
  
            primitive = gl.TRIANGLE_STRIP;//chin
            offset = 4;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);
  
            primitive = gl.TRIANGLE_STRIP;//chin
            offset = 8;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 12;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);
  
            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 16;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 20;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 24;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 28;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)


            primitive = gl.TRIANGLE_STRIP; //chin
            offset = 32;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)


            primitive = gl.LINE_STRIP; //chin
            offset = 36;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINE_STRIP; //chin
            offset = 40;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINE_STRIP; //chin
            offset = 44;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount)


            // pong

            primitive = gl.LINE_LOOP; //pong 1st right
            offset = 48;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount);
  
            primitive = gl.LINE_LOOP; //pong 2nd right
            offset = 63;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINE_LOOP; //pong 3rd right
            offset = 78;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)
            
            primitive = gl.LINE_LOOP; //pong 1st left
            offset = 93;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINE_LOOP; //pong 2nd left
            offset = 108;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINE_LOOP; //pong 3rd left
            offset = 123;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)
            
            //wong

            primitive = gl.TRIANGLE_STRIP; //wong lower white box
            offset = 138;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.TRIANGLE_STRIP; //wong middle white box
            offset = 142;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.LINE_LOOP; //wong trapezium
            offset = 146;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.TRIANGLE_STRIP; //wong upper white box
            offset = 150;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.LINE_LOOP; //wong highest empty box
            offset = 154;
            vertexCount = 4; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.LINES; //wong details lines in trapezium
            offset = 158;
            vertexCount = 54; 
            gl.drawArrays(primitive, offset, vertexCount);

            //pong 

            primitive = gl.LINE_LOOP; //pong 4th right
            offset = 212;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)
            
            primitive = gl.LINE_LOOP; //pong 4th left
            offset = 227;
            vertexCount = 15; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINES; //pong details lines in tiang
            offset = 242;
            vertexCount = 64; 
            gl.drawArrays(primitive, offset, vertexCount);

            primitive = gl.LINE_STRIP; //right HORSE
            offset = 306;
            vertexCount = 36; 
            gl.drawArrays(primitive, offset, vertexCount)

            primitive = gl.LINE_STRIP; //right HORSE
            offset = 342;
            vertexCount = 42; 
            gl.drawArrays(primitive, offset, vertexCount)
           
            
        }
        
        var positions, offset, vertexCount, primitive;
        window.onload = main;
  
        // ########################################### //
        // initBuffers 
        //
        // Initialize the buffers we'll need. For this demo, we just
        // have one object -- a simple two-dimensional square.
        //
        function initBuffers(gl) {
  
            // Create a buffer for the square's positions.
            const positionBuffer = gl.createBuffer();
  
            // Select the positionBuffer as the one to apply buffer
            // operations to from here out.
            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  
            // Now pass the list of positions into WebGL to build the
            // shape. We do this by creating a Float32Array from the
            // JavaScript array, then use it to fill the current buffer.
            gl.bufferData(gl.ARRAY_BUFFER,
                        new Float32Array(positions),
                        gl.STATIC_DRAW);
  
            return {
                position: positionBuffer,
            };
        }
  
        // ########################################### //
        // Draw the scene.
        //
        function drawScene(gl, programInfo, buffers) {
            gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque
            gl.clearDepth(1.0);                 // Clear everything
            gl.enable(gl.DEPTH_TEST);           // Enable depth testing
            gl.depthFunc(gl.LEQUAL);            // Near things obscure far things
  
            // Clear the canvas before we start drawing on it.
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  
            // Create a perspective matrix, a special matrix that is
            // used to simulate the distortion of perspective in a camera.
            // Our field of view is 45 degrees, with a width/height
            // ratio that matches the display size of the canvas
            // and we only want to see objects between 0.1 units
            // and 100 units away from the camera.
            const fieldOfView = 45 * Math.PI / 180;   // in radians
            const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
            const zNear = 0.1;
            const zFar = 100.0;
            const projectionMatrix = mat4.create();
  
            // note: glmatrix.js always has the first argument
            // as the destination to receive the result.
            mat4.perspective(projectionMatrix,
                            fieldOfView,
                            aspect,
                            zNear,
                            zFar);
  
            // Set the drawing position to the "identity" point, which is
            // the center of the scene.
            const modelViewMatrix = mat4.create();
  
            // Now move the drawing position a bit to where we want to
            // start drawing the square.
            mat4.translate(modelViewMatrix,     // destination matrix
                            modelViewMatrix,     // matrix to translate
                            [0.0, 0.0, -6.0]);  // amount to translate 
  
            // Tell WebGL how to pull out the positions from the position
            // buffer into the vertexPosition attribute.
            {
                const numComponents = 2;
                const type = gl.FLOAT;
                const normalize = false;
                const stride = 0;
                const offset = 0;
                gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
                gl.vertexAttribPointer(
                    programInfo.attribLocations.vertexPosition,
                    numComponents,
                    type,
                    normalize,
                    stride,
                    offset);
                gl.enableVertexAttribArray(
                    programInfo.attribLocations.vertexPosition);
            }
  
            // Tell WebGL to use our program when drawing
            gl.useProgram(programInfo.program);
  
            // Set the shader uniforms
            gl.uniformMatrix4fv(
                programInfo.uniformLocations.projectionMatrix,
                false,
                projectionMatrix);
            gl.uniformMatrix4fv(
                programInfo.uniformLocations.modelViewMatrix,
                false,
                modelViewMatrix);
  
            {
                //console.log(offset);
                //console.log(vertexCount);
                //console.log(primitive);
                //gl.drawArrays(primitive, offset, vertexCount);
            }
        }
  
        // ########################################### //
        // Initialize a shader program, so WebGL knows how to draw our data
        //
        function initShaderProgram(gl, vsSource, fsSource) {
            const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
            const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);
  
            // Create the shader program
            const shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertexShader);
            gl.attachShader(shaderProgram, fragmentShader);
            gl.linkProgram(shaderProgram);
  
            // If creating the shader program failed, alert
            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
                alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));
                return null;
            }
  
            return shaderProgram;
        }
  
        // ########################################### //
        // creates a shader of the given type, uploads the source and
        // compiles it.
        //
        function loadShader(gl, type, source) {
            const shader = gl.createShader(type);
  
            // Send the source to the shader object
            gl.shaderSource(shader, source);
  
            // Compile the shader program
            gl.compileShader(shader);
  
            // See if it compiled successfully
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
                gl.deleteShader(shader);
                return null;
            }
  
            return shader;
        }
    </script>
  </head>
  
  <body>
  <canvas id="glCanvas" width="640" height="480"></canvas>
  </body>
